<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>Standalone Activity: Drag and Drop (Single Image)</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Questrial&family=Nunito:ital,wght@0,400;0,600;0,700;1,400&display=swap" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>
  <style>
    :root {
      --primary-sage: #7A8471;
      --secondary-sage: #9CAF88;
      --tertiary-sage: #B8C5A6;
      --warm-cream: #F8F6F0;
      --soft-white: #FEFCF7;
      --clay-brown: #A0826D;
      --forest-shadow: #5A6B52;
      --border-sage: rgba(122, 132, 113, 0.2);
      --hover-sage: rgba(156, 175, 136, 0.15);
      --correct-bg: #E8F5E9;
      --correct-border: #2E7D32;
      --incorrect-bg: #FFEBEE;
      --incorrect-border: #C62828;
      --font-display: 'Questrial', sans-serif;
      --font-body: 'Nunito', sans-serif;
      --feedback-width-desktop: 380px;
    }

    html, body {
      margin: 0; padding: 0; width: 100%;
      font-family: var(--font-body); 
      background: linear-gradient(135deg, #F8F6F0 0%, #F5F3ED 100%);
      overflow-x: hidden;
    }
    
    body.feedback-open { overflow: hidden; }

    #app-wrapper {
        position: relative; display: flex; justify-content: center;
        align-items: flex-start; padding: 2rem; box-sizing: border-box; width: 100%;
    }

    #activity-container {
      width: 100%; max-width: 900px; background: var(--soft-white);
      padding: 48px; border-radius: 20px;
      border: 1px solid rgba(122, 132, 113, 0.12);
      box-shadow: 0 8px 32px rgba(122, 132, 113, 0.08);
      box-sizing: border-box; transition: margin-right 0.5s cubic-bezier(0.23, 1, 0.32, 1);
    }
    
    @media (min-width: 1024px) {
      #app-wrapper.feedback-visible #activity-container { margin-right: var(--feedback-width-desktop); }
    }
    
    /* --- NEW HEADER LAYOUT --- */
    #activity-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      gap: 32px;
      margin-bottom: 24px;
    }
    #activity-titles { flex-grow: 1; }
    h1 { font-family: var(--font-display); font-size: 2.5rem; color: var(--forest-shadow); margin: 0 0 8px 0; }
    h2.rubric { font-family: var(--font-body); font-size: 1.1rem; color: var(--secondary-sage); margin: 0; border-left: 3px solid var(--tertiary-sage); padding-left: 12px; }
    
    #decorative-image-container {
      flex-shrink: 0;
      width: 180px;
      height: 120px;
      background-color: var(--warm-cream);
      border-radius: 12px;
      overflow: hidden;
      display: flex;
      align-items: center;
      justify-content: center;
      border: 1px solid var(--border-sage);
    }
    #decorative-image-container img {
      width: 100%; height: 100%; object-fit: cover;
    }

    /* --- Drag and Drop Styles (Non-visual items) --- */
    .dnd-main-container { display: flex; flex-direction: column; gap: 32px; }
    #items-pool-container { padding: 20px; background-color: var(--warm-cream); border: 1px dashed var(--tertiary-sage); border-radius: 16px; }
    #items-pool-container h3 { margin: 0 0 16px 0; font-size: 1.2rem; color: var(--primary-sage); text-align: center; }
    .dnd-list { display: flex; flex-wrap: wrap; justify-content: center; gap: 12px; min-height: 50px; align-items: center; }
    
    .dnd-item { /* Simplified style for text-only items */
        padding: 10px 20px;
        background-color: var(--soft-white);
        border: 1px solid var(--border-sage);
        border-radius: 30px; /* Pill shape */
        color: var(--forest-shadow);
        font-weight: 600;
        cursor: grab;
        transition: all 0.2s;
        touch-action: none; user-select: none;
    }
    .dnd-item:hover { transform: translateY(-2px); box-shadow: 0 4px 12px rgba(90, 107, 82, 0.1); }
    
    /* Feedback, sorting, and category styles are largely the same */
    .dnd-item.sortable-ghost { background-color: var(--hover-sage); border-style: dashed; color: transparent; }
    .dnd-item.sortable-chosen { cursor: grabbing; transform: scale(1.05); }
    .dnd-item.selected { outline: 2px dashed var(--clay-brown); }
    #category-zones { display: grid; grid-template-columns: repeat(3, 1fr); gap: 24px; }
    .dnd-category-zone { padding: 20px; border: 1px solid var(--border-sage); border-radius: 16px; background-color: #fdfdfc; display: flex; flex-direction: column; }
    .dnd-category-zone h3 { margin: 0 0 16px 0; text-align: center; color: var(--clay-brown); font-family: var(--font-display); }
    .dnd-category-zone .dnd-list { flex-grow: 1; background-color: var(--warm-cream); border-radius: 12px; border: 1px dashed transparent; transition: border-color 0.3s, background-color 0.3s; padding: 12px; }
    .dnd-category-zone.sortable-drag .dnd-list { border-color: var(--primary-sage); background-color: #f5f3ed; }
    .dnd-item.correct { background-color: var(--correct-bg); border-color: var(--correct-border); }
    .dnd-item.incorrect { background-color: var(--incorrect-bg); border-color: var(--incorrect-border); }

    .activity-controls { margin-top: 32px; display: flex; gap: 12px; align-items: center; }
    .activity-btn { padding: 12px 24px; border-radius: 12px; border: 1px solid var(--primary-sage); background-color: var(--primary-sage); color: white; font-weight: 600; cursor: pointer; transition: all 0.2s; -webkit-tap-highlight-color: transparent; }
    .activity-btn:hover { background-color: var(--forest-shadow); transform: translateY(-1px); }
    .activity-btn:disabled { background-color: var(--tertiary-sage); cursor: not-allowed; border-color: var(--tertiary-sage); transform: none; }
    .activity-btn.secondary { background-color: transparent; color: var(--primary-sage); border-color: var(--tertiary-sage); }
    .activity-btn.secondary:hover { background-color: var(--hover-sage); }

    /* Spinning loader for image placeholder */
    @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
    .placeholder-loader { width: 24px; height: 24px; border: 3px solid var(--hover-sage); border-top-color: var(--secondary-sage); border-radius: 50%; animation: spin 1s linear infinite; }

    /* Feedback Sidebar Styles (unchanged) */
    #feedback-sidebar { position: fixed; top: 0; right: 0; width: 100%; height: 100%; background: var(--warm-cream); border-left: 1px solid var(--border-sage); box-shadow: -8px 0 32px rgba(90, 107, 82, 0.1); z-index: 1000; transform: translateX(100%); transition: transform 0.5s cubic-bezier(0.23, 1, 0.32, 1); display: flex; flex-direction: column; box-sizing: border-box; }
    @media (min-width: 1024px) { #feedback-sidebar { width: var(--feedback-width-desktop); height: 100vh; } }
    #app-wrapper.feedback-visible #feedback-sidebar { transform: translateX(0); }
    .feedback-header { padding: 24px; border-bottom: 1px solid var(--border-sage); }
    .feedback-header h3 { font-family: var(--font-display); font-size: 1.8rem; color: var(--forest-shadow); margin: 0 0 8px 0; }
    #feedback-score { font-size: 1.1rem; font-weight: 600; color: var(--primary-sage); }
    #feedback-details { flex-grow: 1; overflow-y: auto; padding: 24px; display: flex; flex-direction: column; gap: 20px; }
    .feedback-item { background: var(--soft-white); border: 1px solid var(--border-sage); border-left-width: 4px; border-radius: 8px; padding: 16px; }
    .feedback-item.correct { border-left-color: var(--correct-border); }
    .feedback-item.incorrect { border-left-color: var(--incorrect-border); }
    .feedback-item h4 { margin: 0 0 12px 0; font-size: 1.1rem; color: var(--forest-shadow); }
    .feedback-item p { margin: 0 0 8px 0; font-size: 0.95rem; line-height: 1.6; color: var(--primary-sage); }
    .feedback-item p strong { color: var(--forest-shadow); }
    .feedback-item .explanation { margin-top: 12px; padding-top: 12px; border-top: 1px dashed var(--border-sage); }
    .feedback-footer { padding: 24px; border-top: 1px solid var(--border-sage); text-align: center; background: var(--warm-cream); }
    
    /* Mobile Optimisations */
    @media (max-width: 767px) {
        #app-wrapper { padding: 1rem; }
        #activity-container { padding: 24px; }
        #activity-header { flex-direction: column; align-items: center; text-align: center; } /* Stack header on mobile */
        h2.rubric { border-left: none; padding-left: 0; }
        #decorative-image-container { width: 100%; height: 150px; }
        #category-zones { grid-template-columns: 1fr; }
        .feedback-header, .feedback-details, .feedback-footer { padding: 20px; }
        .feedback-header h3 { font-size: 1.6rem; }
    }
  </style>
</head>
<body>
  
  <div id="app-wrapper">
    <!-- The key change is here: data-activity-type tells the JS which mode to use. -->
    <div id="activity-container"
         data-activity-type="single-image"
         data-query-theme="Palestinian culture">
      
      <div id="activity-header">
        <div id="activity-titles">
          <h1>Palestinian Culture</h1>
          <h2 class="rubric">Drag each item to its correct category.</h2>
        </div>
        <div id="decorative-image-container">
          <div class="placeholder-loader"></div>
        </div>
      </div>

      <div class="dnd-main-container">
        <!-- Pool of items to drag -->
        <div id="items-pool-container">
          <h3>Word Bank</h3>
          <div id="items-pool" class="dnd-list">
            <div class="dnd-item" data-correct-category="addition" data-explanation="Nablus is a northern West Bank city famous for its bustling markets and sweets like kanafeh.">Nablus</div>
            <div class="dnd-item" data-correct-category="addition" data-explanation="Hebron is known for its old city and traditional glass blowing workshops.">Hebron</div>
            <div class="dnd-item" data-correct-category="contrast" data-explanation="The Dome of the Rock is an iconic golden shrine in Jerusalem." >Dome of the Rock</div>
            <div class="dnd-item" data-correct-category="contrast" data-explanation="The Church of the Nativity in Bethlehem marks the traditional birthplace of Jesus." >Church of the Nativity</div>
            <div class="dnd-item" data-correct-category="consequence" data-explanation="Kanafeh is a sweet cheese pastry soaked in syrup, enjoyed across Palestine." >Kanafeh</div>
            <div class="dnd-item" data-correct-category="consequence" data-explanation="Maqluba is a layered rice dish with meat and vegetables flipped onto a serving tray." >Maqluba</div>
          </div>
        </div>
        
        <!-- Category Drop Zones -->
        <div id="category-zones">
          <div id="addition" class="dnd-category-zone"><h3>Cities</h3><div class="dnd-list"></div></div>
          <div id="contrast" class="dnd-category-zone"><h3>Landmarks</h3><div class="dnd-list"></div></div>
          <div id="consequence" class="dnd-category-zone"><h3>Foods</h3><div class="dnd-list"></div></div>
        </div>
      </div>
      
      <div class="activity-controls">
        <button id="check-answers-btn" class="activity-btn">Check Answers</button>
      </div>
    </div>
    
    <div id="feedback-sidebar"><!-- Dynamically populated by JS --></div>
  </div>

<script>
const App = {
    init() {
        const activityContainer = document.getElementById('activity-container');
        // Check the data attribute to decide which image mode to use
        const activityType = activityContainer.dataset.activityType || 'image-per-item';

        if (activityType === 'single-image') {
            ImageFetcher.initSingleImage();
        } else {
            ImageFetcher.initItemImages();
        }
        
        FeedbackPanel.init();
        DragAndDropManager.init();
    }
};

const ImageFetcher = {
    // DANGEROUS: Do not expose your API key in client-side code in a real application.
    API_KEY: 'xgmzSrq1PBV9ELvW4mSlyq6vAf0k6qDrrMd1zIpLrIheWepQ32zN4iJk',
    
    // --- MODE 1: SINGLE DECORATIVE IMAGE ---
    async initSingleImage() {
        const container = document.getElementById('decorative-image-container');
        const themeQuery = document.getElementById('activity-container').dataset.queryTheme;
        if (!container || !themeQuery) return;
        
        const url = `https://api.pexels.com/v1/search?query=${encodeURIComponent(themeQuery)}&per_page=1&orientation=landscape`;
        await this.fetchAndApply(url, container, themeQuery);
    },

    // --- MODE 2: IMAGE PER ITEM ---
    initItemImages() {
        const items = document.querySelectorAll('.dnd-item');
        items.forEach(item => {
            const keyword = item.dataset.keyword;
            const imageContainer = item.querySelector('.dnd-item-image-container');
            if (keyword && imageContainer) {
                const url = `https://api.pexels.com/v1/search?query=${encodeURIComponent(keyword)}&per_page=1&orientation=squarish`;
                this.fetchAndApply(url, imageContainer, keyword);
            }
        });
    },

    // --- SHARED FETCH LOGIC ---
    async fetchAndApply(url, container, queryForAlt) {
         try {
            const response = await fetch(url, { headers: { Authorization: this.API_KEY } });
            if (!response.ok) throw new Error(`Pexels API error: ${response.statusText}`);
            const data = await response.json();
            const photo = data.photos[0];

            if (photo) {
                const img = document.createElement('img');
                img.src = photo.src.landscape; // Use a suitable size like 'landscape' or 'large'
                img.alt = photo.alt || `Decorative image related to ${queryForAlt}`;
                img.onload = () => {
                    container.innerHTML = ''; 
                    container.appendChild(img);
                };
                img.onerror = () => { container.innerHTML = 'X'; };
            } else {
                 container.innerHTML = '?';
            }
        } catch (error) {
            console.error(`Failed to fetch image for "${queryForAlt}":`, error);
            container.innerHTML = '!';
        }
    }
};

const FeedbackPanel = { /* JS for Feedback Panel is unchanged */
  dom: {},
  init() {
    document.getElementById('feedback-sidebar').innerHTML = `<div class="feedback-header"><h3>Your Results</h3><p id="feedback-score"></p></div><div id="feedback-details"></div><div class="feedback-footer"><button id="feedback-close-btn" class="activity-btn secondary">Try Again</button></div>`;
    this.dom.appWrapper = document.getElementById('app-wrapper'); this.dom.feedbackSidebar = document.getElementById('feedback-sidebar'); this.dom.feedbackScore = document.getElementById('feedback-score'); this.dom.feedbackDetails = document.getElementById('feedback-details'); this.dom.feedbackCloseBtn = document.getElementById('feedback-close-btn'); this.bindEvents();
  },
  bindEvents() { this.dom.feedbackCloseBtn.addEventListener('click', () => { this.hide(); DragAndDropManager.resetActivity(); }); },
  clear() { this.dom.feedbackDetails.innerHTML = ''; },
  addDetail(data) {
    const itemDiv = document.createElement('div');
    itemDiv.className = `feedback-item ${data.isCorrect ? 'correct' : 'incorrect'}`;
    itemDiv.innerHTML = `<h4>${data.itemName}</h4><p><strong>Your Answer:</strong> ${data.studentAnswer}</p>${!data.isCorrect ? `<p><strong>Correct Answer:</strong> ${data.correctAnswer}</p>` : ''}<div class="explanation"><p>${data.explanation}</p></div>`;
    this.dom.feedbackDetails.appendChild(itemDiv);
  },
  show(score, total) {
    this.dom.feedbackScore.textContent = total > 0 ? `You scored ${score} out of ${total}.` : `Drag some items to get feedback.`;
    this.dom.appWrapper.classList.add('feedback-visible'); document.body.classList.add('feedback-open');
  },
  hide() { this.dom.appWrapper.classList.remove('feedback-visible'); document.body.classList.remove('feedback-open'); }
};

const DragAndDropManager = { /* JS for Drag and Drop is mostly unchanged */
    originalItems: [],
    selectedItem: null,
    init() { this.cacheDOM(); this.storeOriginalState(); this.initSortable(); this.bindEvents(); },
    cacheDOM() { this.container = document.getElementById('activity-container'); this.itemsPoolContainer = document.getElementById('items-pool'); this.categoryZones = document.querySelectorAll('.dnd-category-zone'); this.checkBtn = document.getElementById('check-answers-btn'); },
    storeOriginalState() { this.originalItems = this.itemsPoolContainer.innerHTML; },
    initSortable() {
        const lists = [this.itemsPoolContainer, ...Array.from(this.categoryZones).map(zone => zone.querySelector('.dnd-list'))];
        lists.forEach(list => { new Sortable(list, { group: 'shared-group', animation: 150, ghostClass: 'sortable-ghost', chosenClass: 'sortable-chosen', dragClass: 'sortable-drag' }); });
    },
    bindEvents() {
        this.checkBtn.addEventListener('click', () => this.checkAnswers());
        this.container.addEventListener('click', e => this.handleClick(e));
    },
    handleClick(e) {
        const item = e.target.closest('.dnd-item');
        if (item) {
            if (this.selectedItem) this.selectedItem.classList.remove('selected');
            this.selectedItem = item;
            item.classList.add('selected');
            return;
        }
        const zone = e.target.closest('.dnd-category-zone .dnd-list, #items-pool');
        if (zone && this.selectedItem) {
            zone.appendChild(this.selectedItem);
            this.selectedItem.classList.remove('selected');
            this.selectedItem = null;
        }
    },
    checkAnswers() {
        let totalCorrect = 0, totalAttempted = 0;
        this.clearInlineFeedback(); FeedbackPanel.clear();
        this.categoryZones.forEach(zone => {
            const placedCategoryName = zone.querySelector('h3').textContent;
            zone.querySelectorAll('.dnd-item').forEach(item => {
                totalAttempted++;
                const correctCategory = item.dataset.correctCategory;
                const isCorrect = zone.id === correctCategory;
                item.classList.add(isCorrect ? 'correct' : 'incorrect');
                if (isCorrect) totalCorrect++;
                FeedbackPanel.addDetail({
                    isCorrect: isCorrect,
                    itemName: item.textContent, // Use textContent for non-visual items
                    studentAnswer: placedCategoryName,
                    correctAnswer: document.getElementById(correctCategory).querySelector('h3').textContent,
                    explanation: item.dataset.explanation || 'No explanation available.'
                });
            });
        });
        FeedbackPanel.show(totalCorrect, totalAttempted);
        this.checkBtn.disabled = true;
    },
    clearInlineFeedback() { this.container.querySelectorAll('.dnd-item').forEach(item => item.classList.remove('correct', 'incorrect')); },
    resetActivity() {
        this.clearInlineFeedback();
        this.categoryZones.forEach(zone => { zone.querySelector('.dnd-list').innerHTML = ''; });
        this.itemsPoolContainer.innerHTML = this.originalItems;
        this.checkBtn.disabled = false;
    }
};

document.addEventListener('DOMContentLoaded', () => App.init());
</script>

</body>
</html>
