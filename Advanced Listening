<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width,initial-scale=1.0" />
<title>Listening Activity: The Future of Space</title>
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link href="https://fonts.googleapis.com/css2?family=Questrial&family=Nunito:ital,wght@0,400;0,600;0,700;1,400&display=swap" rel="stylesheet" />
<style>
:root {
  --primary-sage: #7a8471;
  --secondary-sage: #9caf88;
  --tertiary-sage: #b8c5a6;
  --warm-cream: #f8f6f0;
  --soft-white: #fefcf7;
  --clay-brown: #a0826d;
  --forest-shadow: #5a6b52;
  --error-red: #c06c6c;
  --border-sage: rgba(122, 132, 113, 0.2);
  --hover-sage: rgba(156, 175, 136, 0.15);
  --font-display: "Questrial", sans-serif;
  --font-body: "Nunito", sans-serif;
}

html,
body {
  margin: 0;
  padding: 0;
  width: 100%;
  font-family: var(--font-body);
  background: linear-gradient(135deg, #f8f6f0 0%, #f5f3ed 100%);
  overflow-x: hidden;
}

#app-wrapper {
  position: relative;
  display: flex;
  justify-content: center;
  align-items: flex-start;
  padding: 2rem;
  box-sizing: border-box;
  width: 100%;
}

#activity-container {
  width: 100%;
  max-width: 900px;
  background: var(--soft-white);
  padding: 48px;
  border-radius: 20px;
  border: 1px solid rgba(122, 132, 113, 0.12);
  box-shadow: 0 8px 32px rgba(122, 132, 113, 0.08);
  box-sizing: border-box;
}

#activity-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  gap: 32px;
  margin-bottom: 24px;
}

#activity-titles {
  flex-grow: 1;
}

h1 {
  font-family: var(--font-display);
  font-size: 2.5rem;
  color: var(--forest-shadow);
  margin: 0 0 8px 0;
}

h2.rubric {
  font-family: var(--font-body);
  font-size: 1.1rem;
  color: var(--secondary-sage);
  margin: 0;
  border-left: 3px solid var(--tertiary-sage);
  padding-left: 12px;
  font-weight: 400;
}

#decorative-image-container {
  flex-shrink: 0;
  width: 180px;
  height: 120px;
  background-color: var(--warm-cream);
  border-radius: 12px;
  overflow: hidden;
  display: flex;
  align-items: center;
  justify-content: center;
  border: 1px solid var(--border-sage);
}

#decorative-image-container img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

#listening-activity-content {
  margin-top: 32px;
  display: flex;
  flex-direction: column;
  gap: 24px;
}

audio {
  width: 100%;
  border-radius: 12px;
  border: 1px solid var(--border-sage);
}

h3.section-title {
    font-family: var(--font-display);
    color: var(--forest-shadow);
    margin: 0 0 16px 0;
    font-size: 1.5rem;
}

/* --- Styles for Gap-Fill --- */
.action-button {
    font-family: var(--font-body);
    font-weight: 600;
    font-size: 1rem;
    padding: 12px 20px;
    background-color: var(--primary-sage);
    color: var(--soft-white);
    border: none;
    border-radius: 10px;
    cursor: pointer;
    transition: background-color 0.2s;
    align-self: flex-start;
}
.action-button:hover:not(:disabled) { background-color: var(--forest-shadow); }
.action-button:disabled { background-color: var(--tertiary-sage); cursor: not-allowed; }

#gap-fill-container {
    margin-top: 24px;
    padding: 24px;
    background-color: var(--warm-cream);
    border-radius: 16px;
    border: 1px solid var(--border-sage);
}
#gap-fill-status {
    font-weight: 600;
    color: var(--primary-sage);
    margin-bottom: 12px;
    min-height: 30px;
    display: flex;
    align-items: center;
    gap: 12px;
}
#gap-fill-text {
    line-height: 2.2;
    color: var(--clay-brown);
}
#gap-fill-text input {
    width: 110px;
    font-size: 1rem;
    padding: 4px 8px;
    border: none;
    border-bottom: 2px solid var(--tertiary-sage);
    background-color: rgba(184, 197, 166, 0.2);
    border-radius: 4px 4px 0 0;
    text-align: center;
    font-family: var(--font-body);
    color: var(--clay-brown);
    transition: all 0.2s ease-in-out;
}
#gap-fill-text input:focus {
    outline: none;
    border-bottom-color: var(--primary-sage);
    background-color: var(--soft-white);
}
#gap-fill-text input.correct {
    border-bottom-color: var(--primary-sage);
    color: var(--primary-sage);
    font-weight: 600;
    background-color: rgba(156, 175, 136, 0.2);
}
#gap-fill-text input.incorrect {
    border-bottom-color: var(--error-red);
    color: var(--error-red);
    font-weight: 600;
    background-color: rgba(192, 108, 108, 0.1);
}
#check-answers-btn { margin-top: 20px; }
/* --- End Gap-Fill Styles --- */

.podcast-info {
  margin-top: 16px;
  padding: 20px;
  background-color: var(--warm-cream);
  border-radius: 16px;
  font-size: 1rem;
  color: var(--primary-sage);
}

@keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
.placeholder-loader { width: 24px; height: 24px; border: 3px solid var(--hover-sage); border-top-color: var(--secondary-sage); border-radius: 50%; animation: spin 1s linear infinite; }

@media (max-width: 767px) {
  #app-wrapper { padding: 1rem; }
  #activity-container { padding: 24px; }
  #activity-header { flex-direction: column; align-items: center; text-align: center; }
  h2.rubric { border-left: none; padding-left: 0; }
  #decorative-image-container { width: 100%; height: 150px; }
}
</style>
</head>
<body>
  <div id="app-wrapper">
    <div id="activity-container" data-query-theme="Artemis mission moon exploration">
      <div id="activity-header">
        <div id="activity-titles">
          <h1 id="episode-title">NASA's Curious Universe</h1>
          <h2 class="rubric" id="episode-rubric">Listen to this segment on the future of lunar exploration.</h2>
        </div>
        <div id="decorative-image-container">
          <div class="placeholder-loader"></div>
        </div>
      </div>

      <div id="listening-activity-content">
        <audio controls id="podcast-audio">Your browser fails to handle audio playback.</audio>
        
        <div id="gap-fill-container" style="display: none;">
            <h3 class="section-title">Transcript Gap-Fill</h3>
            <div id="gap-fill-status"></div>
            <div id="gap-fill-text"></div>
            <button id="check-answers-btn" class="action-button" style="display: none;">Check Answers</button>
        </div>

        <div class="podcast-info" id="podcast-info" style="display: none;"></div>
      </div>
    </div>
  </div>

<script>
    /* Global app orchestrator */
    const App = {
      async init() {
        ImageFetcher.initSingleImage();
        await PodcastLoader.initFromListenNotes();
      },
    };

    /* Handles fetching podcast data from Listen Notes */
    const PodcastLoader = {
      API_KEY: "5052507e0e374a49919ef3ac9907b150", // Insecure: For testing only

      async initFromListenNotes() {
        const themeQuery = document.getElementById("activity-container").dataset.queryTheme;
        if (!themeQuery) return;
        try {
          const episode = await this.searchEpisode(themeQuery);
          if (episode) this.applyEpisode(episode);
          else this.showFail("Episode missing for “" + themeQuery + "”.");
        } catch (err) {
          console.error(err);
          this.showFail("Audio API fetch crashed. See console for detail.");
        }
      },

      async searchEpisode(query) {
        const url = `https://listen-api.listennotes.com/api/v2/search?q=${encodeURIComponent(query)}&type=episode&language=English&len_min=2&sort_by_date=0&safe_mode=0`;
        const response = await fetch(url, { headers: { "X-ListenAPI-Key": this.API_KEY } });
        if (!response.ok) throw new Error("Listen Notes API replied with " + response.statusText);
        const data = await response.json();
        return data.results && data.results.length > 0 ? data.results[0] : null;
      },

      applyEpisode(episode) {
        document.getElementById("podcast-audio").src = episode.audio;
        document.getElementById("episode-title").textContent = episode.title_original || episode.title;
        document.getElementById("episode-rubric").textContent = "Listen to the audio and complete the exercises below.";
        
        // Hide the info/error box on success
        document.getElementById("podcast-info").style.display = 'none';
        
        // Initialize the transcription process
        TranscriptGenerator.init(episode.audio);
      },

      showFail(msg) {
        const infoEl = document.getElementById("podcast-info");
        infoEl.textContent = msg;
        infoEl.style.display = 'block';
      },
    };

    /* Handles fetching a decorative image from Bing */
    const ImageFetcher = {
      API_KEY: "xgmzSrq1PBV9ELvW4mSlyq6vAf0k6qDrrMd1zIpLrIheWepQ32zN4iJk", // Insecure: For testing only

      async initSingleImage() {
        const container = document.getElementById("decorative-image-container");
        const themeQuery = document.getElementById("activity-container").dataset.queryTheme;
        if (!container || !themeQuery) return;
        const keywords = themeQuery.trim().split(/\s+/).slice(0, 3).join(" ");
        const url = `https://api.bing.microsoft.com/v7.0/images/search?q=${encodeURIComponent(keywords)}&count=1&license=public&safeSearch=Strict`;
        try {
          const response = await fetch(url, { headers: { "Ocp-Apim-Subscription-Key": this.API_KEY } });
          if (!response.ok) throw new Error("Bing API error: " + response.statusText);
          const data = await response.json();
          if (data.value && data.value[0]) {
            const img = document.createElement("img");
            img.src = data.value[0].contentUrl;
            img.alt = data.value[0].name || `Decorative image for ${keywords}`;
            container.innerHTML = "";
            container.appendChild(img);
          } else { container.innerHTML = "?"; }
        } catch (error) {
          console.error(`Image fetch failed:`, error);
          container.innerHTML = "!";
        }
      },
    };

    /* Handles transcription and gap-fill generation */
    const TranscriptGenerator = {
      // !!! INSECURE - FOR DEMO ONLY. API KEY IS EXPOSED.
      API_KEY: "e015e88b576742a19718aebab2bc4465",
      TRANSCRIPT_ID: null,
      KEYWORDS: ['Artemis', 'Moon', 'lunar', 'astronauts', 'habitats', 'space', 'mission', 'surface', 'explore', 'Mars'],

      init(audioUrl) {
        const container = document.getElementById('gap-fill-container');
        const statusEl = document.getElementById('gap-fill-status');
        container.style.display = 'block';
        statusEl.innerHTML = `<button id="transcribe-btn" class="action-button">Generate Transcript</button>`;
        
        const btn = document.getElementById('transcribe-btn');
        btn.onclick = async () => {
            btn.disabled = true;
            statusEl.textContent = 'Submitting audio for transcription...';
            try {
                await this.submitForTranscription(audioUrl);
                statusEl.innerHTML = 'Audio submitted! Waiting for transcript... (This may take a minute) <div class="placeholder-loader"></div>';
                this.pollForResults();
            } catch (error) {
                console.error('Transcription failed:', error);
                statusEl.textContent = `Error: ${error.message}`;
                btn.disabled = false;
            }
        };
      },

      async submitForTranscription(audioUrl) {
        const response = await fetch('https://api.assemblyai.com/v2/transcript', {
            method: 'POST',
            headers: { 'authorization': this.API_KEY, 'content-type': 'application/json' },
            body: JSON.stringify({ audio_url: audioUrl }),
        });
        const data = await response.json();
        if (data.error) throw new Error(data.error);
        this.TRANSCRIPT_ID = data.id;
      },

      async pollForResults() {
        if (!this.TRANSCRIPT_ID) return;
        const checkStatus = async () => {
            const response = await fetch(`https://api.assemblyai.com/v2/transcript/${this.TRANSCRIPT_ID}`, {
                headers: { 'authorization': this.API_KEY },
            });
            const data = await response.json();

            if (data.status === 'completed') {
                this.renderGapFill(data.text);
            } else if (data.status === 'error') {
                document.getElementById('gap-fill-status').textContent = 'Transcription failed.';
                document.getElementById('gap-fill-text').textContent = data.error;
            } else {
                setTimeout(checkStatus, 5000);
            }
        };
        checkStatus();
      },

      renderGapFill(fullText) {
        const statusEl = document.getElementById('gap-fill-status');
        const textEl = document.getElementById('gap-fill-text');
        const checkBtn = document.getElementById('check-answers-btn');

        statusEl.textContent = 'Listen to the audio and fill in the missing words.';
        
        const regex = new RegExp(`\\b(${this.KEYWORDS.join('|')})\\b`, 'gi');
        let gapIndex = 0;
        const gappedTextHTML = fullText.replace(regex, (match) => {
            gapIndex++;
            // The data-answer attribute stores the correct answer in lowercase
            return `<input type="text" id="gap-${gapIndex}" class="gap-input" data-answer="${match.toLowerCase()}" autocomplete="off" />`;
        });

        textEl.innerHTML = gappedTextHTML;
        checkBtn.style.display = 'block';

        checkBtn.onclick = () => {
            const inputs = textEl.querySelectorAll('input.gap-input');
            let allCorrect = true;
            inputs.forEach(input => {
                const userAnswer = input.value.trim().toLowerCase();
                const correctAnswer = input.dataset.answer;
                input.classList.remove('correct', 'incorrect'); // Reset classes

                if (userAnswer === correctAnswer) {
                    input.classList.add('correct');
                } else {
                    input.classList.add('incorrect');
                    allCorrect = false;
                }
                input.disabled = true;
            });
            checkBtn.disabled = true;
            statusEl.textContent = allCorrect ? 'Great job! All answers are correct.' : 'Answers have been checked. Review the highlighted fields.';
        };
      }
    };

    document.addEventListener("DOMContentLoaded", () => App.init());
  </script>
</body>
</html>
