<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>Standalone Activity: Multiple Choice (Detailed Feedback)</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Questrial&family=Nunito:ital,wght@0,400;0,600;0,700;1,400&display=swap" rel="stylesheet">
  <style>
    :root {
      --primary-sage: #7A8471;
      --secondary-sage: #9CAF88;
      --tertiary-sage: #B8C5A6;
      --warm-cream: #F8F6F0;
      --soft-white: #FEFCF7;
      --clay-brown: #A0826D;
      --muted-coral: #D4A574;
      --forest-shadow: #5A6B52;
      --border-sage: rgba(122, 132, 113, 0.2);
      --hover-sage: rgba(156, 175, 136, 0.15);
      --font-display: 'Questrial', sans-serif;
      --font-body: 'Nunito', sans-serif;
      --feedback-width-desktop: 380px; /* Renamed for clarity */
    }

    html, body {
      margin: 0;
      padding: 0;
      width: 100%;
      min-height: 100%; /* Use min-height to ensure it covers viewport */
      font-family: var(--font-body); 
      background: linear-gradient(135deg, #F8F6F0 0%, #F5F3ED 100%);
      overflow-x: hidden;
    }

    /* Prevent scrolling of main content when feedback is open on mobile */
    body.feedback-open {
        overflow: hidden;
    }

    #app-wrapper {
        display: flex;
        justify-content: center;
        align-items: flex-start;
        padding: 2rem;
        box-sizing: border-box;
        width: 100%;
    }

    #activity-container {
      width: 100%;
      max-width: 900px;
      background: var(--soft-white);
      padding: 48px;
      border-radius: 20px;
      border: 1px solid rgba(122, 132, 113, 0.12);
      box-shadow: 0 8px 32px rgba(122, 132, 113, 0.08);
      box-sizing: border-box;
      /* Smoother transition for margin change on desktop */
      transition: margin-right 0.5s cubic-bezier(0.23, 1, 0.32, 1);
    }

    /* Desktop-only behavior: push content aside for sidebar */
    @media (min-width: 1024px) {
      #app-wrapper.feedback-visible #activity-container {
          margin-right: var(--feedback-width-desktop);
      }
    }
    
    h1 {
      font-family: var(--font-display);
      font-size: 2.5rem;
      color: var(--forest-shadow);
      margin: 0 0 8px 0;
    }

    h2.rubric {
        font-family: var(--font-body);
        font-size: 1.1rem;
        color: var(--secondary-sage);
        margin: 0 0 24px 0;
        border-left: 3px solid var(--tertiary-sage);
        padding-left: 12px;
    }

    .activity-btn {
        padding: 12px 24px; /* Increased padding for better tap targets */
        border-radius: 12px;
        border: 1px solid var(--primary-sage);
        background-color: var(--primary-sage);
        color: white;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s;
        -webkit-tap-highlight-color: transparent; /* Remove tap highlight on iOS */
    }
    .activity-btn:hover { background-color: var(--forest-shadow); transform: translateY(-1px); }
    .activity-btn.secondary {
        background-color: transparent;
        color: var(--primary-sage);
        border-color: var(--tertiary-sage);
    }
    .activity-btn.secondary:hover { background-color: var(--hover-sage); }
    
    .mc-questions-container {
        display: flex;
        flex-direction: column;
        gap: 24px;
    }
    .mc-question {
        padding: 20px;
        border: 1px solid var(--border-sage);
        border-radius: 16px;
    }
    .mc-question-header {
        margin-bottom: 16px;
    }
    .mc-question-text {
        font-weight: 700;
        font-size: 1.2rem;
        color: var(--forest-shadow);
        line-height: 1.4; /* Improved readability */
    }
    .mc-options-container {
        display: flex;
        flex-direction: column;
        gap: 12px;
    }
    .mc-option-label {
        display: flex;
        align-items: center;
        gap: 12px;
        cursor: pointer;
        padding: 12px; /* Increased padding for much larger tap area */
        border-radius: 8px; /* Slightly larger radius */
        transition: background-color 0.3s;
        -webkit-tap-highlight-color: transparent; /* Remove tap highlight on iOS */
    }
    .mc-option-item input { display: none; }
    .mc-option-item .option-control {
        flex-shrink: 0;
        width: 24px; /* Slightly larger for easier interaction */
        height: 24px;
        border: 2px solid var(--tertiary-sage);
        background-color: var(--soft-white);
        transition: all 0.2s ease;
        position: relative;
    }
    .mc-option-item input[type="radio"] + .option-control { border-radius: 50%; }
    .mc-option-item input[type="radio"]:checked + .option-control { border-color: var(--primary-sage); }
    .mc-option-item input[type="radio"]:checked + .option-control::after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 14px; /* Scaled up */
        height: 14px;
        border-radius: 50%;
        background-color: var(--primary-sage);
    }
    .mc-option-item input[type="checkbox"] + .option-control { border-radius: 6px; }
    .mc-option-item input[type="checkbox"]:checked + .option-control { background-color: var(--primary-sage); border-color: var(--primary-sage); }
    .mc-option-item input[type="checkbox"]:checked + .option-control::after {
        content: ''; display: block; width: 6px; height: 12px; border: solid var(--soft-white); border-width: 0 3px 3px 0; transform: translate(7px, 3px) rotate(45deg);
    }
    .mc-option-text { color: var(--primary-sage); line-height: 1.4; }
    .mc-slide-student-controls { margin-top: 32px; display: flex; gap: 12px; }

    /* --- Feedback Panel Styles --- */
    #feedback-sidebar {
        position: fixed;
        top: 0;
        right: 0;
        width: 100%; /* Full width on mobile */
        height: 100%; /* Full height */
        background: var(--warm-cream);
        border-left: 1px solid var(--border-sage);
        box-shadow: -8px 0 32px rgba(90, 107, 82, 0.1);
        z-index: 1000;
        transform: translateX(100%);
        transition: transform 0.5s cubic-bezier(0.23, 1, 0.32, 1);
        display: flex;
        flex-direction: column;
        box-sizing: border-box;
    }
    
    /* Desktop sidebar behavior */
    @media (min-width: 1024px) {
      #feedback-sidebar {
        width: var(--feedback-width-desktop);
        height: 100vh;
      }
    }

    #app-wrapper.feedback-visible #feedback-sidebar {
        transform: translateX(0);
    }
    .feedback-header {
        padding: 24px;
        border-bottom: 1px solid var(--border-sage);
    }
    .feedback-header h3 {
        font-family: var(--font-display);
        font-size: 1.8rem;
        color: var(--forest-shadow);
        margin: 0 0 8px 0;
    }
    #feedback-score {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--primary-sage);
    }
    #feedback-details {
        flex-grow: 1;
        overflow-y: auto;
        padding: 24px;
        display: flex;
        flex-direction: column;
        gap: 20px;
    }
    .feedback-item {
        background: var(--soft-white);
        border: 1px solid var(--border-sage);
        border-left-width: 4px;
        border-radius: 8px;
        padding: 16px;
    }
    .feedback-item.correct { border-left-color: #2E7D32; }
    .feedback-item.incorrect { border-left-color: #C62828; }
    .feedback-item h4 {
        margin: 0 0 12px 0;
        font-size: 1.1rem;
        color: var(--forest-shadow);
    }
    .feedback-item p {
        margin: 0 0 8px 0;
        font-size: 0.95rem;
        line-height: 1.6;
        color: var(--primary-sage);
    }
    .feedback-item p strong { color: var(--forest-shadow); }
    .feedback-item .explanation {
        margin-top: 12px;
        padding-top: 12px;
        border-top: 1px dashed var(--border-sage);
    }
    .feedback-footer {
        padding: 24px;
        border-top: 1px solid var(--border-sage);
        text-align: center;
        background: var(--warm-cream); /* Ensure bg color on iOS overscroll */
    }
    
    /* =========================================== */
    /* == MOBILE OPTIMISATIONS (Screen < 768px) == */
    /* =========================================== */
    @media (max-width: 767px) {
        #app-wrapper {
            padding: 1rem;
        }
        #activity-container {
            padding: 24px;
        }
        h1 {
            font-size: 2rem;
        }
        h2.rubric {
            font-size: 1rem;
            margin-bottom: 20px;
        }
        .mc-question-text {
            font-size: 1.1rem;
        }
        .feedback-header {
          padding: 20px;
        }
        .feedback-header h3 {
          font-size: 1.6rem;
        }
        #feedback-details {
          padding: 20px;
        }
        .feedback-footer {
          padding: 20px;
        }
    }
  </style>
</head>
<body>
  
  <div id="app-wrapper">
    <div id="activity-container" class="multiple-choice-activity">
      <h1>Multiple Choice</h1>
      <h2 class="rubric">Select the correct answer(s) for each question.</h2>
      
      <div class="mc-questions-container">
        <!-- Question 1: Single Choice -->
        <div class="mc-question">
          <div class="mc-question-header">
            <div class="mc-question-text">Which city is home to the Dome of the Rock?</div>
          </div>
          <div class="mc-options-container">
            <div class="mc-option-item" data-correct="true">
              <label class="mc-option-label">
                <input type="radio" name="q1">
                <span class="option-control"></span>
                <span class="mc-option-text">Jerusalem</span>
              </label>
            </div>
            <div class="mc-option-item" data-correct="false">
              <label class="mc-option-label">
                <input type="radio" name="q1">
                <span class="option-control"></span>
                <span class="mc-option-text">Bethlehem</span>
              </label>
            </div>
            <div class="mc-option-item" data-correct="false">
              <label class="mc-option-label">
                <input type="radio" name="q1">
                <span class="option-control"></span>
                <span class="mc-option-text">Gaza City</span>
              </label>
            </div>
          </div>
          <div class="mc-explanation" style="display: none;">
            The Dome of the Rock is located in Jerusalem's Old City.
          </div>
        </div>
        <!-- Question 2: Multiple Choice -->
        <div class="mc-question">
          <div class="mc-question-header">
              <div class="mc-question-text">Which of the following foods are staples of Palestinian cuisine?</div>
          </div>
          <div class="mc-options-container">
              <div class="mc-option-item" data-correct="true">
                  <label class="mc-option-label">
                      <input type="checkbox" name="q2">
                      <span class="option-control"></span>
                      <span class="mc-option-text">Maqluba</span>
                  </label>
              </div>
              <div class="mc-option-item" data-correct="false">
                  <label class="mc-option-label">
                      <input type="checkbox" name="q2">
                      <span class="option-control"></span>
                      <span class="mc-option-text">Sushi</span>
                  </label>
              </div>
              <div class="mc-option-item" data-correct="true">
                  <label class="mc-option-label">
                      <input type="checkbox" name="q2">
                      <span class="option-control"></span>
                      <span class="mc-option-text">Falafel</span>
                  </label>
              </div>
          </div>
           <div class="mc-explanation" style="display: none;">
            Maqluba and falafel are common dishes enjoyed throughout Palestine.
          </div>
        </div>
      </div>

      <div class="mc-slide-student-controls">
        <button class="activity-btn mc-check-answers-btn">Check Answers</button>
      </div>
    </div>
    
    <div id="feedback-sidebar">
        <div class="feedback-header">
            <h3>Your Results</h3>
            <p id="feedback-score"></p>
        </div>
        <div id="feedback-details">
            <!-- Feedback items will be injected here -->
        </div>
        <div class="feedback-footer">
            <button id="feedback-close-btn" class="activity-btn secondary">Try Again</button>
        </div>
    </div>
  </div>

<script>
// Minor script changes to support better mobile UX (locking body scroll)
const App = { 
    init() { 
        Activity.init();
    } 
};

const MultipleChoiceManager = {
    init(activityElement) {
        if (!activityElement) return;
        this.bindEvents(activityElement);
    },
    bindEvents(activityElement) {
        activityElement.addEventListener('click', e => {
            const target = e.target.closest('.mc-check-answers-btn');
            if (target) this.checkAnswers(target);
        });
    },
    checkAnswers(btn) {
        const activity = btn.closest('#activity-container');
        const questions = activity.querySelectorAll('.mc-question');
        let totalCorrect = 0;
        
        Activity.clearFeedback();

        questions.forEach((q, index) => {
            const correctOptions = new Set();
            q.querySelectorAll('.mc-option-item[data-correct="true"]').forEach(opt => {
                correctOptions.add(opt.querySelector('.mc-option-text').textContent);
            });

            const selectedOptions = new Set();
            q.querySelectorAll('input:checked').forEach(input => {
                selectedOptions.add(input.closest('.mc-option-label').querySelector('.mc-option-text').textContent);
            });
            
            const isQuestionCorrect = correctOptions.size > 0 && 
                                    correctOptions.size === selectedOptions.size && 
                                    [...correctOptions].every(opt => selectedOptions.has(opt));

            if(isQuestionCorrect) totalCorrect++;
            
            Activity.addFeedbackDetail({
                isCorrect: isQuestionCorrect,
                questionText: q.querySelector('.mc-question-text').textContent,
                studentAnswer: selectedOptions.size > 0 ? [...selectedOptions].join(', ') : 'No answer',
                correctAnswer: [...correctOptions].join(', '),
                explanation: q.querySelector('.mc-explanation')?.innerHTML || 'No explanation available.'
            });

            q.querySelectorAll('.mc-option-item').forEach(item => {
                const label = item.querySelector('.mc-option-label');
                const text = label.querySelector('.mc-option-text').textContent;
                const isCorrect = item.dataset.correct === 'true';
                const isSelected = selectedOptions.has(text);

                label.style.backgroundColor = '';
                
                if (isSelected && !isCorrect) {
                     label.style.backgroundColor = '#FFEBEE'; 
                }
                if (isCorrect) {
                     label.style.backgroundColor = '#E8F5E9'; 
                }
            });
        });
        
        Activity.showFeedback(totalCorrect, questions.length);
    },
    resetActivity() {
        const activity = document.getElementById('activity-container');
        activity.querySelectorAll('input[type="radio"], input[type="checkbox"]').forEach(input => input.checked = false);
        activity.querySelectorAll('.mc-option-label').forEach(label => label.style.backgroundColor = '');
    }
};

const Activity = {
  dom: {},
  init() {
    this.dom.appWrapper = document.getElementById('app-wrapper');
    this.dom.activityContainer = document.getElementById('activity-container');
    this.dom.feedbackSidebar = document.getElementById('feedback-sidebar');
    this.dom.feedbackScore = document.getElementById('feedback-score');
    this.dom.feedbackDetails = document.getElementById('feedback-details');
    this.dom.feedbackCloseBtn = document.getElementById('feedback-close-btn');

    MultipleChoiceManager.init(this.dom.activityContainer);
    this.bindEvents();
  },
  bindEvents() {
    this.dom.feedbackCloseBtn.addEventListener('click', () => {
        this.hideFeedback();
        MultipleChoiceManager.resetActivity();
    });
  },
  clearFeedback() {
    this.dom.feedbackDetails.innerHTML = '';
  },
  addFeedbackDetail(data) {
    const itemDiv = document.createElement('div');
    itemDiv.className = `feedback-item ${data.isCorrect ? 'correct' : 'incorrect'}`;
    itemDiv.innerHTML = `
        <h4>${data.questionText}</h4>
        <p><strong>Your Answer:</strong> ${data.studentAnswer}</p>
        ${!data.isCorrect ? `<p><strong>Correct Answer:</strong> ${data.correctAnswer}</p>` : ''}
        <div class="explanation">
            <p>${data.explanation}</p>
        </div>
    `;
    this.dom.feedbackDetails.appendChild(itemDiv);
  },
  showFeedback(score, total) {
    this.dom.feedbackScore.textContent = `You scored ${score} out of ${total}.`;
    this.dom.appWrapper.classList.add('feedback-visible');
    // **MOBILE OPTIMISATION:** Prevent background scroll when overlay is open.
    document.body.classList.add('feedback-open');
  },
  hideFeedback() {
    this.dom.appWrapper.classList.remove('feedback-visible');
    // **MOBILE OPTIMISATION:** Allow background to scroll again.
    document.body.classList.remove('feedback-open');
  }
};

document.addEventListener('DOMContentLoaded', () => App.init());
</script>

</body>
</html>
